#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2012 Martin Raspaud

# Author(s):

#   Martin Raspaud <martin.raspaud@smhi.se>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""The nameserver. Port 5555 (hardcoded) is used for communications.
"""

# TODO: make port configurable.

import zmq
from posttroll.connections import GenericConnections
from posttroll.message import Message
from posttroll.ns import get_active_address

import logging

LOOP = True

logger = logging.getLogger(__name__)

def main(*args):
    """Run the listener and answer to requests.
    """
    del args
    
    gc_ = GenericConnections("")
    gc_.start()
    port = 5555

    try:
        context = zmq.Context()
        listener = context.socket(zmq.REP)
        listener.bind("tcp://*:"+str(port))
        while LOOP:
            msg = listener.recv()
            logger.debug("Replying to request: " + str(msg))
            msg = Message.decode(msg)
            listener.send_unicode(str(get_active_address(msg.data["type"],
                                                         gc_)))
    except KeyboardInterrupt:
        # Needed to stop the nameserver.
        pass
    finally:
        gc_.stop()
        listener.close()


if __name__ == '__main__':
    
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--daemon", help="Run as a daemon",
                        choices=["start", "stop", "restart"])
    parser.add_argument("-l", "--log", help="File to log to", default=None)
    opts = parser.parse_args()

    if opts.log:
        import logging.handlers
        handler = logging.handlers.TimedRotatingFileHandler(opts.log,
                                                            "midnight",
                                                            backupCount = 7)
        handler.setFormatter(logging.Formatter("[%(levelname)s: %(asctime)s :"
                                                    " %(name)s] %(message)s",
                                                    '%Y-%m-%d %H:%M:%S'))
        handler.setLevel(logging.DEBUG)
        logging.getLogger('').setLevel(logging.DEBUG)
        logging.getLogger('').addHandler(handler)
        logger = logging.getLogger("nameserver")

    if opts.daemon is None:
        try:
            main()
        except KeyboardInterrupt:
            pass
        except:
            logger.exception("Something wrong happened...")
            raise
        finally:
            print ("Thanks for using pytroll/nameserver. "
                   "See you soon on www.pytroll.org!")

    else: # Running as a daemon
        try:
            import daemon.runner
            import signal
            import sys
            
            class App(object):
                """App object for running the nameserver as daemon.
                """
                stdin_path = "/dev/null"
                stdout_path = "/dev/null"
                stderr_path = "/dev/null"
                run = main
                pidfile_path = "/tmp/nameserver.pid"
                pidfile_timeout = 90

            def _terminate(*args):
                """terminate the nameserver.
                """
                del args
                global LOOP
                LOOP = False


            signal.signal(signal.SIGTERM, _terminate)


            APP = App()
            sys.argv = [sys.argv[0], opts.daemon]
            angel = daemon.runner.DaemonRunner(APP)
            if opts.log:
                angel.daemon_context.files_preserve = [handler.stream]
            angel.parse_args([sys.argv[0], opts.daemon])
            sys.exit(angel.do_action())
        except ImportError:
            print "Cannot run as a daemon, you need python-daemon installed."
